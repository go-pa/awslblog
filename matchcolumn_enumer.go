// Code generated by "enumer -type=MatchColumn -trimprefix Column -json"; DO NOT EDIT.

package awslblog

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MatchColumnName = "TypeTimeELBClientIPClientPortTargetIPTargetPortRequestProcessingTimeTargetProcessingTimeResponseProcessingTimeELBStatusCodeTargetStatusCodeReceivedBytesSentBytesRequestVerbRequestURLRequestProtoUserAgentSSLCipherSSLProtocolTargetGroupArnTraceIdDomainNameChosenCertArnMatchedRulePriorityRequestCreationTimeActionsExecutedRedirectURLLambdaErrorReasonTargetPortListTargetStatusCodeListClassificationClassificationReason"

var _MatchColumnIndex = [...]uint16{0, 4, 8, 11, 19, 29, 37, 47, 68, 88, 110, 123, 139, 152, 161, 172, 182, 194, 203, 212, 223, 237, 244, 254, 267, 286, 305, 320, 331, 348, 362, 382, 396, 416}

const _MatchColumnLowerName = "typetimeelbclientipclientporttargetiptargetportrequestprocessingtimetargetprocessingtimeresponseprocessingtimeelbstatuscodetargetstatuscodereceivedbytessentbytesrequestverbrequesturlrequestprotouseragentsslciphersslprotocoltargetgrouparntraceiddomainnamechosencertarnmatchedrulepriorityrequestcreationtimeactionsexecutedredirecturllambdaerrorreasontargetportlisttargetstatuscodelistclassificationclassificationreason"

func (i MatchColumn) String() string {
	if i < 0 || i >= MatchColumn(len(_MatchColumnIndex)-1) {
		return fmt.Sprintf("MatchColumn(%d)", i)
	}
	return _MatchColumnName[_MatchColumnIndex[i]:_MatchColumnIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MatchColumnNoOp() {
	var x [1]struct{}
	_ = x[ColumnType-(0)]
	_ = x[ColumnTime-(1)]
	_ = x[ColumnELB-(2)]
	_ = x[ColumnClientIP-(3)]
	_ = x[ColumnClientPort-(4)]
	_ = x[ColumnTargetIP-(5)]
	_ = x[ColumnTargetPort-(6)]
	_ = x[ColumnRequestProcessingTime-(7)]
	_ = x[ColumnTargetProcessingTime-(8)]
	_ = x[ColumnResponseProcessingTime-(9)]
	_ = x[ColumnELBStatusCode-(10)]
	_ = x[ColumnTargetStatusCode-(11)]
	_ = x[ColumnReceivedBytes-(12)]
	_ = x[ColumnSentBytes-(13)]
	_ = x[ColumnRequestVerb-(14)]
	_ = x[ColumnRequestURL-(15)]
	_ = x[ColumnRequestProto-(16)]
	_ = x[ColumnUserAgent-(17)]
	_ = x[ColumnSSLCipher-(18)]
	_ = x[ColumnSSLProtocol-(19)]
	_ = x[ColumnTargetGroupArn-(20)]
	_ = x[ColumnTraceId-(21)]
	_ = x[ColumnDomainName-(22)]
	_ = x[ColumnChosenCertArn-(23)]
	_ = x[ColumnMatchedRulePriority-(24)]
	_ = x[ColumnRequestCreationTime-(25)]
	_ = x[ColumnActionsExecuted-(26)]
	_ = x[ColumnRedirectURL-(27)]
	_ = x[ColumnLambdaErrorReason-(28)]
	_ = x[ColumnTargetPortList-(29)]
	_ = x[ColumnTargetStatusCodeList-(30)]
	_ = x[ColumnClassification-(31)]
	_ = x[ColumnClassificationReason-(32)]
}

var _MatchColumnValues = []MatchColumn{ColumnType, ColumnTime, ColumnELB, ColumnClientIP, ColumnClientPort, ColumnTargetIP, ColumnTargetPort, ColumnRequestProcessingTime, ColumnTargetProcessingTime, ColumnResponseProcessingTime, ColumnELBStatusCode, ColumnTargetStatusCode, ColumnReceivedBytes, ColumnSentBytes, ColumnRequestVerb, ColumnRequestURL, ColumnRequestProto, ColumnUserAgent, ColumnSSLCipher, ColumnSSLProtocol, ColumnTargetGroupArn, ColumnTraceId, ColumnDomainName, ColumnChosenCertArn, ColumnMatchedRulePriority, ColumnRequestCreationTime, ColumnActionsExecuted, ColumnRedirectURL, ColumnLambdaErrorReason, ColumnTargetPortList, ColumnTargetStatusCodeList, ColumnClassification, ColumnClassificationReason}

var _MatchColumnNameToValueMap = map[string]MatchColumn{
	_MatchColumnName[0:4]:          ColumnType,
	_MatchColumnLowerName[0:4]:     ColumnType,
	_MatchColumnName[4:8]:          ColumnTime,
	_MatchColumnLowerName[4:8]:     ColumnTime,
	_MatchColumnName[8:11]:         ColumnELB,
	_MatchColumnLowerName[8:11]:    ColumnELB,
	_MatchColumnName[11:19]:        ColumnClientIP,
	_MatchColumnLowerName[11:19]:   ColumnClientIP,
	_MatchColumnName[19:29]:        ColumnClientPort,
	_MatchColumnLowerName[19:29]:   ColumnClientPort,
	_MatchColumnName[29:37]:        ColumnTargetIP,
	_MatchColumnLowerName[29:37]:   ColumnTargetIP,
	_MatchColumnName[37:47]:        ColumnTargetPort,
	_MatchColumnLowerName[37:47]:   ColumnTargetPort,
	_MatchColumnName[47:68]:        ColumnRequestProcessingTime,
	_MatchColumnLowerName[47:68]:   ColumnRequestProcessingTime,
	_MatchColumnName[68:88]:        ColumnTargetProcessingTime,
	_MatchColumnLowerName[68:88]:   ColumnTargetProcessingTime,
	_MatchColumnName[88:110]:       ColumnResponseProcessingTime,
	_MatchColumnLowerName[88:110]:  ColumnResponseProcessingTime,
	_MatchColumnName[110:123]:      ColumnELBStatusCode,
	_MatchColumnLowerName[110:123]: ColumnELBStatusCode,
	_MatchColumnName[123:139]:      ColumnTargetStatusCode,
	_MatchColumnLowerName[123:139]: ColumnTargetStatusCode,
	_MatchColumnName[139:152]:      ColumnReceivedBytes,
	_MatchColumnLowerName[139:152]: ColumnReceivedBytes,
	_MatchColumnName[152:161]:      ColumnSentBytes,
	_MatchColumnLowerName[152:161]: ColumnSentBytes,
	_MatchColumnName[161:172]:      ColumnRequestVerb,
	_MatchColumnLowerName[161:172]: ColumnRequestVerb,
	_MatchColumnName[172:182]:      ColumnRequestURL,
	_MatchColumnLowerName[172:182]: ColumnRequestURL,
	_MatchColumnName[182:194]:      ColumnRequestProto,
	_MatchColumnLowerName[182:194]: ColumnRequestProto,
	_MatchColumnName[194:203]:      ColumnUserAgent,
	_MatchColumnLowerName[194:203]: ColumnUserAgent,
	_MatchColumnName[203:212]:      ColumnSSLCipher,
	_MatchColumnLowerName[203:212]: ColumnSSLCipher,
	_MatchColumnName[212:223]:      ColumnSSLProtocol,
	_MatchColumnLowerName[212:223]: ColumnSSLProtocol,
	_MatchColumnName[223:237]:      ColumnTargetGroupArn,
	_MatchColumnLowerName[223:237]: ColumnTargetGroupArn,
	_MatchColumnName[237:244]:      ColumnTraceId,
	_MatchColumnLowerName[237:244]: ColumnTraceId,
	_MatchColumnName[244:254]:      ColumnDomainName,
	_MatchColumnLowerName[244:254]: ColumnDomainName,
	_MatchColumnName[254:267]:      ColumnChosenCertArn,
	_MatchColumnLowerName[254:267]: ColumnChosenCertArn,
	_MatchColumnName[267:286]:      ColumnMatchedRulePriority,
	_MatchColumnLowerName[267:286]: ColumnMatchedRulePriority,
	_MatchColumnName[286:305]:      ColumnRequestCreationTime,
	_MatchColumnLowerName[286:305]: ColumnRequestCreationTime,
	_MatchColumnName[305:320]:      ColumnActionsExecuted,
	_MatchColumnLowerName[305:320]: ColumnActionsExecuted,
	_MatchColumnName[320:331]:      ColumnRedirectURL,
	_MatchColumnLowerName[320:331]: ColumnRedirectURL,
	_MatchColumnName[331:348]:      ColumnLambdaErrorReason,
	_MatchColumnLowerName[331:348]: ColumnLambdaErrorReason,
	_MatchColumnName[348:362]:      ColumnTargetPortList,
	_MatchColumnLowerName[348:362]: ColumnTargetPortList,
	_MatchColumnName[362:382]:      ColumnTargetStatusCodeList,
	_MatchColumnLowerName[362:382]: ColumnTargetStatusCodeList,
	_MatchColumnName[382:396]:      ColumnClassification,
	_MatchColumnLowerName[382:396]: ColumnClassification,
	_MatchColumnName[396:416]:      ColumnClassificationReason,
	_MatchColumnLowerName[396:416]: ColumnClassificationReason,
}

var _MatchColumnNames = []string{
	_MatchColumnName[0:4],
	_MatchColumnName[4:8],
	_MatchColumnName[8:11],
	_MatchColumnName[11:19],
	_MatchColumnName[19:29],
	_MatchColumnName[29:37],
	_MatchColumnName[37:47],
	_MatchColumnName[47:68],
	_MatchColumnName[68:88],
	_MatchColumnName[88:110],
	_MatchColumnName[110:123],
	_MatchColumnName[123:139],
	_MatchColumnName[139:152],
	_MatchColumnName[152:161],
	_MatchColumnName[161:172],
	_MatchColumnName[172:182],
	_MatchColumnName[182:194],
	_MatchColumnName[194:203],
	_MatchColumnName[203:212],
	_MatchColumnName[212:223],
	_MatchColumnName[223:237],
	_MatchColumnName[237:244],
	_MatchColumnName[244:254],
	_MatchColumnName[254:267],
	_MatchColumnName[267:286],
	_MatchColumnName[286:305],
	_MatchColumnName[305:320],
	_MatchColumnName[320:331],
	_MatchColumnName[331:348],
	_MatchColumnName[348:362],
	_MatchColumnName[362:382],
	_MatchColumnName[382:396],
	_MatchColumnName[396:416],
}

// MatchColumnString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MatchColumnString(s string) (MatchColumn, error) {
	if val, ok := _MatchColumnNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MatchColumnNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MatchColumn values", s)
}

// MatchColumnValues returns all values of the enum
func MatchColumnValues() []MatchColumn {
	return _MatchColumnValues
}

// MatchColumnStrings returns a slice of all String values of the enum
func MatchColumnStrings() []string {
	strs := make([]string, len(_MatchColumnNames))
	copy(strs, _MatchColumnNames)
	return strs
}

// IsAMatchColumn returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MatchColumn) IsAMatchColumn() bool {
	for _, v := range _MatchColumnValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MatchColumn
func (i MatchColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MatchColumn
func (i *MatchColumn) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MatchColumn should be a string, got %s", data)
	}

	var err error
	*i, err = MatchColumnString(s)
	return err
}
